/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';
import {
  IItem,
} from '@esri/arcgis-rest-portal';

export namespace Components {
  interface HubContentCard {
    'content': string;
    'contentItem': IItem;
    'layout': string;
  }
  interface HubRadar {
    'address': string;
    'mapCenter': string;
    'mapItem': any;
    'mapItemData': any;
    'mapZoom': string;
    'messages': any;
    'showMap': boolean;
    'webmap': string;
  }
  interface HubRadarInput {
    /**
    * Default address to search
    */
    'address': string;
    /**
    * Geographic extent limit for geocoding
    */
    'extent': any;
  }
  interface HubRadarMap {
    'center': string;
    'webmap': string;
    'zoom': string;
  }
  interface HubSearch {}
  interface HubSuggestInput {
    /**
    * Geographic extent limit for geocoding
    */
    'extent': any;
    /**
    * Value for input placeholder
    */
    'placeholder': string;
    /**
    * Default search
    */
    'query': string;
    /**
    * Value for submit button
    */
    'submit': string;
    /**
    * Values that the auto-complete textbox should search for
    */
    'suggestions': Array<string>;
  }
  interface HubTopic {
    'contenttype': string;
    'description': string;
    'image': string;
    'item': string;
    'layout': string;
    'name': string;
    'url': string;
  }
}

declare global {


  interface HTMLHubContentCardElement extends Components.HubContentCard, HTMLStencilElement {}
  var HTMLHubContentCardElement: {
    prototype: HTMLHubContentCardElement;
    new (): HTMLHubContentCardElement;
  };

  interface HTMLHubRadarElement extends Components.HubRadar, HTMLStencilElement {}
  var HTMLHubRadarElement: {
    prototype: HTMLHubRadarElement;
    new (): HTMLHubRadarElement;
  };

  interface HTMLHubRadarInputElement extends Components.HubRadarInput, HTMLStencilElement {}
  var HTMLHubRadarInputElement: {
    prototype: HTMLHubRadarInputElement;
    new (): HTMLHubRadarInputElement;
  };

  interface HTMLHubRadarMapElement extends Components.HubRadarMap, HTMLStencilElement {}
  var HTMLHubRadarMapElement: {
    prototype: HTMLHubRadarMapElement;
    new (): HTMLHubRadarMapElement;
  };

  interface HTMLHubSearchElement extends Components.HubSearch, HTMLStencilElement {}
  var HTMLHubSearchElement: {
    prototype: HTMLHubSearchElement;
    new (): HTMLHubSearchElement;
  };

  interface HTMLHubSuggestInputElement extends Components.HubSuggestInput, HTMLStencilElement {}
  var HTMLHubSuggestInputElement: {
    prototype: HTMLHubSuggestInputElement;
    new (): HTMLHubSuggestInputElement;
  };

  interface HTMLHubTopicElement extends Components.HubTopic, HTMLStencilElement {}
  var HTMLHubTopicElement: {
    prototype: HTMLHubTopicElement;
    new (): HTMLHubTopicElement;
  };
  interface HTMLElementTagNameMap {
    'hub-content-card': HTMLHubContentCardElement;
    'hub-radar': HTMLHubRadarElement;
    'hub-radar-input': HTMLHubRadarInputElement;
    'hub-radar-map': HTMLHubRadarMapElement;
    'hub-search': HTMLHubSearchElement;
    'hub-suggest-input': HTMLHubSuggestInputElement;
    'hub-topic': HTMLHubTopicElement;
  }
}

declare namespace LocalJSX {
  interface HubContentCard {
    'content'?: string;
    'contentItem'?: IItem;
    'layout'?: string;
  }
  interface HubRadar {
    'address'?: string;
    'mapCenter'?: string;
    'mapItem'?: any;
    'mapItemData'?: any;
    'mapZoom'?: string;
    'messages'?: any;
    'showMap'?: boolean;
    'webmap'?: string;
  }
  interface HubRadarInput {
    /**
    * Default address to search
    */
    'address'?: string;
    /**
    * Geographic extent limit for geocoding
    */
    'extent'?: any;
    /**
    * Emits the {address, coordinates} of the geocoded result
    */
    'onEventAddressUpdated'?: (event: CustomEvent<any>) => void;
  }
  interface HubRadarMap {
    'center'?: string;
    'webmap'?: string;
    'zoom'?: string;
  }
  interface HubSearch {}
  interface HubSuggestInput {
    /**
    * Geographic extent limit for geocoding
    */
    'extent'?: any;
    'onQueryInput'?: (event: CustomEvent<any>) => void;
    /**
    * Emits the query of the input result
    */
    'onQuerySelect'?: (event: CustomEvent<any>) => void;
    /**
    * Value for input placeholder
    */
    'placeholder'?: string;
    /**
    * Default search
    */
    'query'?: string;
    /**
    * Value for submit button
    */
    'submit'?: string;
    /**
    * Values that the auto-complete textbox should search for
    */
    'suggestions'?: Array<string>;
  }
  interface HubTopic {
    'contenttype'?: string;
    'description'?: string;
    'image'?: string;
    'item'?: string;
    'layout'?: string;
    'name'?: string;
    'url'?: string;
  }

  interface IntrinsicElements {
    'hub-content-card': HubContentCard;
    'hub-radar': HubRadar;
    'hub-radar-input': HubRadarInput;
    'hub-radar-map': HubRadarMap;
    'hub-search': HubSearch;
    'hub-suggest-input': HubSuggestInput;
    'hub-topic': HubTopic;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'hub-content-card': LocalJSX.HubContentCard & JSXBase.HTMLAttributes<HTMLHubContentCardElement>;
      'hub-radar': LocalJSX.HubRadar & JSXBase.HTMLAttributes<HTMLHubRadarElement>;
      'hub-radar-input': LocalJSX.HubRadarInput & JSXBase.HTMLAttributes<HTMLHubRadarInputElement>;
      'hub-radar-map': LocalJSX.HubRadarMap & JSXBase.HTMLAttributes<HTMLHubRadarMapElement>;
      'hub-search': LocalJSX.HubSearch & JSXBase.HTMLAttributes<HTMLHubSearchElement>;
      'hub-suggest-input': LocalJSX.HubSuggestInput & JSXBase.HTMLAttributes<HTMLHubSuggestInputElement>;
      'hub-topic': LocalJSX.HubTopic & JSXBase.HTMLAttributes<HTMLHubTopicElement>;
    }
  }
}


